-*- coding: utf-8 -*-

2014-05-30

Emacs Chat: Christopher Wellons (FFI, Emacs internals)

https://www.youtube.com/watch?v=Hr06UDD4mCs

http://sachachua.com/blog/2014/05/emacs-chat-christopher-wellons/

Emacs Chat: Christopher Wellons (FFI, Emacs internals)

Sacha Chua

Sacha: Hello and welcome to another episode of Emacs chat. This time
with Christopher Wellons. Who is the author of --among other things--
something that will play Tetris in Emacs for you.

Sacha: Hello Christopher, thank you for joining us.

Christopher: You are welcome.

I initially read your blog post about foreign functions interface and other
things, and I realized you are the same guy who put together Skewer mode
and other really cool interactive things in Emacs.

Before we get into how you got into Emacs and all other interesting things you do
with it, can you tell us a little about who you are outside of Emacs.

Christopher: I'm your typical computer geek. I've been using Emacs for
9 years. I run regularly, I run 3 days a week. I like computer games,
and reading. I spend a lot time watching YouTube videos actually.
That's a big hobby. I find these long, half hour clips, mostly people
playing video games. So I find myself watching others playing video
games. A lot of time I can do my own thing while doing that, so it's
almost like multitasking that way.

Sacha: Yeah you got the benefit of xx without xx doing the hard work.
I noticed on your blog that you also make computer games?

Christopher: Occasionally. I like to participate in this 7-days
rogue-like contests every year. That's a fun thing to do for a week. I
like the constraints, but I only do it for about a week, then I forget
about it after that.

Sacha: Hum, a lot fun interests.

You mentioned you started Emacs 9 years ago, which is pretty amazing.
How did you get into it.

Christopher: So I was in an intership in college, at the time. And I
was getting a lot more serious about programing. I've been programing
for 19 years now. Xxx when doing the intership I was getting serious
about it, and after that I've been just using keyright xx and some
other, some basic stuff.

Christopher: And I read probably something Richard Stallman, or Steve
Yegge xx or some other essays. And I decided to actually look into
this Emacs thing. And that's what ended up happening. I installed it,
was reading all the manuals. I got one of those orelly books, I read
that, then I just gradually built up from that point. It became my
only text editor quickly.

Where you customizing it right away? or you xx using it as a
environment for programing as well?

Christopher: I was customizing it right away, mostly copy and pasting
snippets here and there, because I didn't understand how a lot of it
works. This thing wil tell me xx and I drop it into my configuration.

Christopher: And it wasn't actually until few years ago, I put my
Emacs config in source control. So the whole thing is carefully
curated now. And I xx miss the whole copy out and I messed a few years
there.

So you ended up Emacs bankrupcy and you started curating it from
scratch xx

Christopher: It's pretty close to from scratch. I got heavily redone.
We'll take a look at it am sure. I got a little macro to help organize
it here and there, and package things up in a nice clean blocks. That
happened at the same time I got source control, almost like a rewrite.

Now 9 years ago we didn't have lots of the resources we have now, xx
about Emacs config, no github. I don't remember if Emacswiki was
around then. You mentioned the book was useful, the oreilly book, what
other resources you found helpful.

Christopher: After that..., actually I gave the book away years ago,
because that's just a beginner book. I gave it to a coworker, hoping
to get her into Emacs. But since then it's really just been primarily
reading the Emacs lisp reference manual. There's still so much in that
manual I don't know about. I go thru it all the time, and I've gone
thru it cover to cover basically. There's still things like detail,
and I go back like “oh, I didn't know you could do that”.

Yeah, everytime I read the manual, I came across something new. Last
time I read the Emacs manual, I learned how to add unicode characters.
There's just so much to learn. Probably reading the manual, and
reading the source code as well.

You mentioned coworker. You actually have other coworker using Emacs
too?

Christopher: Yes, I've got a few coworkers, not many. I spend time
discussing Emacs with them on occasion. Kind of sharing notes, and how
we do things. What's funny is pretty much all of them have adopted the
color theme. The xx theme that comes with Emacs. It seems everybody is
using that now. Xx I kind of it's fun to see that. I know that looks
familiar when I see their screens.

[laughs] yes it's interesting to see the diffusion of practices when
several people use Emacs together. You config is on github so we can
pickup interesting things off that as well. Xx

So you check with other people, learn from source code, xx about the
hacking you've been doing about building web servers and other
interactive xx you actually build something that can talk to Emacs
inferior processes? Emacs within Emacs?

Christopher: That was a project a couple weeks ago. Xx I haven't
announce it “yet” [hand sign on quote].

I'm sorry...

Christopher: That's fine.

So you decided to customize it right off the bat, 9 years ago. How did
you get to the point when you are comfortable enough with Emacs
internals to just say “oh I think I would like to have Emacs interact
live with a web browser”

Christopher: That's basically how I came to. I don't know xx almost
anything I want it to do right now so I just.... I have an idea, then
I'm going to try that, and that becomes my primary focus for a short
period of time until I make it work that way.

Christopher: To elaborate on that, I got a Steam account, I got
something like 200, 300 games in there, but I rarely ever play them,
because these programing activities are almost always more fun. Like,
I can play this game or I can xx play with Emacs. It's almost always
emacs.

[laughes] yeah you have it. Emacs is more addictive than games you can
play on Steam. [laughes] I've heard that from other Emacs users as
well, this is relaxation and fun and intellectual curiosity.

So basically you learned about all these things by having crazy ideas.
What xx decides you to use Emacs to play tetris on its own. And then
digging around and figuring out how to do it.

Christopher: So you saw xx tetris mode then?

I just came across that the other day. I often show tetris... kind of
when you are demonstrating em to other people and you want to boggle
their mind about just how much is in Emacs. So I normally show things
like tetris and xx and xx and also tetris. That drives people crazy.

Ok, so, lots really odd and interesting things. One other thing people
are often curious about is how actually people use Emacs. What's your
workflow like, what are the different things you configured. And you
share your config on github, Btw folks listening you can find cw's
github it's

https://github.com/skeeto

But we like to also see I guess the highlights of your config.
Particularly interesting snippets you are using.

Christopher: Sure. Shall I switch to my screencast here then?

Humum. And folks, you can ask questions by submitting to the q＆a app
or adding them to the event page or if you are on irc there's
emacs-chat channel on Freenode.

Ok! so, you got stuff! [laughes]

---------
Christopher: That's actually my server log. I'll show xx So here's my
init file. You can see that Okay?

Yeah, I can see it just fine.

Christopher: So, something that'll stand out pretty quick... I got
this 「with-package」 macro here. You'll see that showing over and
over again. This is something I wrote myself. There's a bunch of
different versions. Everybody kind of written their own little version
of this because there isn't an official one at this point. It sort of
groups relations configurations together into blocks. Sort of having
all these lose ends xx kind of dumped in. I can say everything related
to, for example “uniquify” goes into this block.

Christopher: Things related to eshell goes into this block right here.

Christopher: And I don't have to risk xx any of the packages, i'll
just use elpa and melpa so I don't have to install any of those
packages explicitly Xx Only it mentions here 「with-package」 it will
automatically get installed when Emacs starts if it's not installed.

Humm, I should use that. I've been using 「use-package」 by john
wigley xx but it doesn't do the installs, so the xx this will actually
mean it always happens

Christopher: Xx use-packages xx there's another one of this macros
like somebody else's There's a few of them out there. One's kind of xx
Like if you look at this entry this asterisk

Christopher: So the ones without the asterisk are lazily loaded. So,
they let Emacs load them as late as possible. Those with asterisk are
force loaded. So... Like “uniquify”, I don't want to wait for that to
load, I want it just load right away, so its got an asterisk on it.
Same way with 「winner-mode」. With winner-mode, you can hop with
arrow keys between buffers, I like doing that.

Christopher: Then there's asterisk on other things that has to do with
auto-load Pretty xx but it's useful for me. Xx I haven't xx for other
people to use.

Sometimes you have asterisk after package names?

Christopher: Yeah, that's something changed with package.el, and the
latest changes. It used to creeate a secondary package called with
percent name but dash auto-loads and there's a really cool trick where
you could 「require」 the auto-load package and you can do some
configuration lazily. There's a nice trick, but I got rid of that.
There's no longer xx auto-load package xx generated

Christopher: So I have to modify my 「with-package」 macro. So it has
the same effect with the asterisk on the package names, I want that
effect.

12:41

Christopher: So in this case, I want to make sure I load the auto-load
  of the markdown-mode or something like that, when one of these
  [file] patterns get opened, it'll open in markdown-mode. The
  auto-load's already been set. It's something like that. I can't
  remember the details right now.

Sacha: Cool, I like to try.

• 13:11 other than that, there's nothing too much special here. Just a
bunch of things I like to use. Like right here, I can quickly lookup
java documentation. I got that down to =C-h j=. So normally you can
lookup documentation with control h xx so I can lookup Emacs doc. Or
I can do this, I can lookup, let's say I want to lookup 「ArrayList」.
I do this, and it'll pop up a browser over here.

Sacha: That's really neat.

Christopher: And these are all the packages that's been loaded in this
quick jump xx. And what make this work really well was that java doc
is ubiquitous. Xx packages has java doc package made, so it easy. So
documentation in this nice format I can jump to. Xx documentation
installed on my machine by that process.

Sacha: Yeah that's good stuff. I often findig myself googling for all
these, but it's nice to have that, just a quick keyboard shortcut
away.

Sacha: One of those thing is multiple-cursors... I hear it's super
awesome, but I haven't got my mind around it yet.

Christopher: Yeah it lets me do this, and modify the stuff I want. Xx
actually replaced xx I used to do stuff like that with a macro, I
write a little macro, like this, [apply to all lines] like that.

Christopher: Multiple-cursors, that's so much more comfortable.

Sacha: Okay, got a hang of it, that's awesome.

[but that's not mine, of course]

Christopher: One thing I want to show, is impatient mode, as I was
asked about this specifically. So if you visited in your web browser

http://zeus.nullprogram.com:8888/imp/

( https://github.com/skeeto/impatient-mode Impatient Mode See the
effect of your HTML as you type it.

http://nullprogram.com/blog/2012/08/20/

)

Sacha: I put the comment in the event so people can find that too

Christopher: I should check this myself. You'll see if you click on
the scratch buffer, you'll see a copy of my scratch buffer here. And
it has syntax highlighting.

Sacha: That's awesome. How are you using this? what do you use it for?

Christopher: So if I need to share my screen with someone remotely,
this is easier than going thru a normal screen sharing session like
right this minute. I can just turn on impatient-mode, it's already
turned on here. And give that url, and they can watch what I'm doing.

its really useful if I pop up a eshell like this. And I can run a
shell here and share that too. Now if I turn on impatient-mode like
this, now you be able to see this buffer too.

Sacha: Are you bulding a 2-way communication into this at some point?

Christopher: No it's just one-way. It's just a collaboration between
me and Brian Taylor xx. He's a coworker and a friend of mine.

( Brian Taylor's blog on impatient mode
http://www.50ply.com/blog/2012/08/13/introducing-impatient-mode/ )

it's build on the same web server, which I call httpd xx, it's the
same one skewer uses.

( skewer-mode https://github.com/skeeto/skewer-mode

Skewer: live web development with Emacs Provides live interaction with
JavaScript, CSS, and HTML in a web browser. Expressions are sent
on-the-fly from an editing buffer to be evaluated in the browser, just
like Emacs does with an inferior Lisp process in Lisp modes. )

anytime I'm doing something with Emacs that involving the web I'm
using my little web server.

Sacha: I should try that too. It looks like you put all sort of good
uses. You already have a demo of skeywer xx which allows xx easily
interact in JavaScript and a browser. I think it's pretty darn cool
too.

Sacha: So, impatient-mode... So FFI foreign function interfaces, how
are you using that? I saw your blog post demonstrating it, but am
curious about practical applications if you've explored xx.

Christopher: That kind of hit the wall a little bit, as it gets
complicated pretty quickly. One problem I'm having... I don't have any
real practical uses for it yet, I thought maybe I can run gtk window
like that, run a little graphical system that way. But if any body
linux users and want gtk applications from a terminal knows that they
are really noisy, puts out a lot debugging messages, and that's
actually... I haven't made it robust enough messages actually
interfere my communication with Emacs. As it goes into sudo terminal
and error messages, and they get piped into the same pipe, and because
of that it gets in the way.

i haven't done anything significant with that beyond just a little
demo, which I can show here really quick.

so am just going to copy right out of my readme here and drop them
here. So, whenever you start using ffi, it creates what I call a
context numerics and xx processes that's running my little ffi
program, and its really simple. It's a stack machine, that I can send
strings and basic values to, so I can say I got 「srand」, so here's
my function name, here's my function signature, and push all these
values into the stack, and pop them off I get them in Emacs.

so here I can seed, xx I can run that, and that returns a void right
there. And I can start generating random numbers.

Sacha: You said ffi communicates with... You said Emacs process?

Christopher: It's a Emacs inferior process. If I hop in here... you
see those glue program? so it's just a c++ program. That's linked with
ffi.h right here. And it just drives ffi with this really simple-httpd
call that chops xx thru a pseudo terminal thru a pipe am using.

simple-httpd https://github.com/skeeto/emacs-web-server

it's just a pretty simple stack machine that makes it work. There's a
swith for the byte code, and I can push different sizes of integers
onto the stack. And that created these little glue programs right here
〔ffi-glue〕. So that's what runs in the background.

Sacha: You mentioned you get that to work with a package and I was
curious about how it all came together.

Christopher: 21:01 if it's going to be a package, there's complication
such as how do you handle that binary. That's something I resolved
with emacSQL... don't know if you saw that.

so that runs a sub-process in the background. In order to make that
work xx there's a package on melpa, it actually ships with c source
code. And it will attepm as best as it can to compile that when you
install it, so it might take a minute to install because its going to
run a c compiler xx to get that to work. I can try to demostrate it.

this going to make a sequal database.

so I got this connection object.

this is using, a really cool part of Emacs, it came from sedat xx
called eieio, which I think is really clever. It's an object system a
lot like common lisp clos. So this function, there's also [interface
for] mysql and also postgres one, actually 2 psql drivers, I can do
this, this is the database name, called “testing”.

so it'll create this database object that, thanks to eieio, it'll work
with all the same, because they are generic functions it'll work with
the same functions. So once you have this db object, you don't care
what's there anymore, you can just use this emacsql function to make
queries on it.

i can say

(emacsql db [:create-table foo ([name id])]) (emacsql db [:insert-into
foo :values])

like this.

notice this is a s-expression, so instead of doing

"SELECT * FROM foo"

i build up these vectors of symbols and it actually compiles into sql
expressions. I can demostrate that.

so here's a expression,

(emacsql db [:insert-into foo :values ["Chris" 0]])

i can compile that right there

INSERT INTO foo VALUES ('"Chris"', 0);

that's what it going to compile to.

Sacha: 24:14 wow, that's cool.

Christopher: Then I can make queries on the db.

(emacsql db [:select * :from foo])

(("Chris" 0))

oh, about the extra quoting. I'm not sure I made the right choice on
this. Anything that's not a number. First, 「nil」 maps to 「null」. I
can insert a null into db just by using a nil there. Anything not nil
or a number, will get printed into a string.

xx

Sacha: Now am curious, what got you interested in bulding this in the
first place? “maybe we should do all these things on db from Emacs”,
or were you working on a project?

Christopher: Actually it goes back to elfeed, which is my web feed
reader. So skewer mode is probably my most used Emacs packages right
now. But the most useful for me has been elfeed.

it's a feed reader. I created it after Google Reader shutdown. And I
wasn't happy with any of the alternatives, so I thought, I could do
better than all these, and i'll write my own, that's what I ended up
doing.

( https://github.com/skeeto/elfeed Elfeed is an extensible web feed
reader for Emacs, supporting both Atom and RSS. It requires Emacs 24
and is available for download from MELPA. Elfeed was inspired by
notmuch. )

Christopher: This touches on emacsql xx while at this. So I wrote this
in august last year, I wrote emacsql around the beginning of this
year. Back in august I wrote elfeed, I needed a db to store all these
in. So if i clear this out, you going to see just the last 10 weeks.
These are all the different entries I've read and looked at.

so in last 10 weeks there's been 2451 entries. So these are all stored
in the db. You see all these tags, the green on the right. These tags,
I can go into these, look at the content inside. Here's a real xx
purse, way about Emacs. So I can read them here right inside Emacs. Or
I can find ...

Sacha: I saw in your screenshot you have images for this too.

Christopher: Oh yeah. If I pop down, one of these's going to have
images. There you go. There's one, this is my own blog. So I can read
my own posts right here in Emacs. And go back and forth between posts
here.

so that's where emacsql comes in. I need to store all these info in a
db, and efficiently index it. If you look down at the bottom here, I
press s. I got this filter. You see this:

Filter: -junk @10-weeks-ago nullproam

and I start to type my blog name in, and you see it started to filter
what you see.

let's say I want to see, everything with the tag +youtube

 Filter: -junk @10-weeks-ago +youtube

and it's all YouTube stuff in the last 10 weeks. I can narrow it down
to 4 weeks, or 1 day ago...

Sacha: I like that. It's xx kind of got quick browsing, thru something
like my org data. Really cool stuff.

Christopher: So I need to search this fast, and I end up writing my
own db format.

Sacha: That's like the definition of yak-shaving right there.
<laughes>

Christopher: There's no db really suitable for this in Emacs, that's
why I struck out to write emacsql to try to provide a db, so it'll
never have to be done again.

and I started to port elfeed to emacsql, it's not finished yet. Xx am
not sure I really want to do that or not, but that's something
possible in the future.

Sacha: So sounds like xx your life inside Emacs. You read blogs, web
browsers, and other things... what else do you do inside Emacs?

how xx it's taking over other things you do?

Christopher: So I do email too. I prefer “notmuch” as my email client.

Sacha: I heard good things about it. What do you like about it?

Christopher: I like ... I'm afraid to bring up email [privacy reasons]

Christopher: This one should be safe. [results of email search shown]

so you notice, it looks pretty similar to elfeed. You see tags on the
right. It actually inspired the interface for elfeed.

i like how fast the searching is, xx

1235 messages in it?

Sacha: I'm going to give it a try. I've been using gnus. I thought
it's interesting.

Christopher: I did try mu4a. I tried it and I didn't like it as much
as “notmuch”.

Sacha: So you use mail... your config mentioned you use calc. Do you
use it just as a calculator or do you have any other fancy things for
it?

Christopher: Pretty much as a arbitrary precision calculator.

lots times... what's 2^128 it's useful. I already have Emacs open
anyway, so I just jump xx to it.

and if I need to do units, it'll keep tracking it for me. S for
seconds change it to year. This is really handy. 5

Sacha: That's great. I see you got the hang of all these things. Calc
is great, it's like a microcosm in Emacs. This absurdly powerful and
flexible thing.

Christopher: It can do calculus. It's a full computer algebra system.

it's not fair to call it a calculator really, because it's so much
more than that.

Sacha: So you write a lot markdown in your config?

Christopher: Oh yeah. I write my blog in markdown. All those posts are
markdown. All the READMEs. I just prefer markdown for all my
documentation.

i haven't made the jump to ord-mode yet.

it's been this thing I haven't learned, I've never learned enough
about it to make good use of it. I know you love org mode right?

Sacha: I find it to be similarly flexible, right? you can do all sort
of things with it. But you've got lots of things in markdown,
basically that's the way your brain works.

i guess org mode is similar, but the syntax is different. There's a
little bit of friction to get over.

so, if you are not using org mode, are there other ways you manage
your tasks?

Christopher: Outside of this I'm not actually all that organized. I
just work from my head lots of the time, more than I should. I forget
things, not even knowing I forget them.

Sacha: You've written lots of large software, all kept in your head,
so... wow.

Christopher: There's something about elfeed. I noticed you are writing
a post about... You logged all your activities, you track how much
time you spending on all these various things.

i actually recently came up with elfeed ... on the side of my website,
you'll see these lists of places that I recommend checking out. These
huge list. I was kind of manually maintaining these lists. Until
recently, I realized I can tab the elfeed db to fill these out for me.
Cuz am already maintaining all these stuff in elfeed.

here's how I worked out. Here's my blogs. Here's where the list come
from. A list of blogs I was recommending. I use this function called
jekyll insert-url and I got a little filter string here

<!-- (jekyll/insert-urls "+blog -product -myself ") -->

so I can just run this. It'll evaluate it right in the buffer.

oh, it's supposed to be working.

Sacha: That's alright, it's the nature of demos, all goes wrong.

Christopher: Yeah.

Sacha: I see the idea. Since you already have all the data anyway you
might as well ... use the same interface for searching for tags or
whatever, you might even consider kind of capturing ur reading data,
and organizing reading into a list xx so the stuff you like reeading
more actually show up earlier in the list.

Christopher: Yeah. That's something I should probably track more. As I
read things, somehow capture that info and xx put to elfeed. As I got
a db right there I can catpure the info and make use of it in the
future.

Sacha: The nice thing about Emacs... you can do all these
instrumentations... xx

cool. So you do a heck lots of things in Emacs. So anything you
haven't got around to do in Emacs yet? <laughes>

Christopher: There's a barrier for me to learn new programing
languages. This touches on skewer mode. Is that. Before I get into xx
I want a way to set xx a workflow before I like it. That's how skwer
came about. I need to learn JavaScript and web development, and I need
to find some workflow in Emacs, and I looked at swing.js and it didn't
quite do what I was looking for, and ended up writing skewer mode
while I learn JavaScript.

Sacha: <laughs> let me make sure if I understand this correctly. You
want to learn JavaScript, so you developed something in Emacs that
works with js interactiving, using js talking to a browser, and
writing however many lines of code in js to communicate with Emacs
process.

Christopher: Yes.

Sacha: In order to learn js.

Christopher: Yes. It's part of learning. A good exercise too.

Sacha: That's totally awesome. Xx I was thinking you've been doing
this for a while, like years of experience with js and got really
tired of the roundtrip or whatever. So, your first step into this is
really cool.

Christopher: I can demo how that works real quick. So here I say

i use xx pentadactal btw

so I say 「run-skewer」and it opens a blank tab here in browser that's
connected to Emacs and I pop up a JavaScript scatch buffer. I got a
scratch buffer for every language xx

i can write JavaScript expressions

Math.pow(13,2.1)

[result shows under the expression]

there's a repl

Sacha: I love you have lots repls

Christopher: Yeah. I love repls. I love live systems. Steve yegge,
he's got a xx real good essay about live systems xx powerful, I
recommend checking that out. You can find on googl pretty quick.

so this is connected to the tab right here. To prove that, I can
switch to my css scratch buffer. And I can say, I want the background
to be red. And I evaluate just like in Emacs lisp. I press control x
control e.

Christopher: And I want js here. I switch to a html buffer. Selector
insert the page this part is a bit crude i haven't got this refined
yet. It's got limited use. Say I want to insert a heading to the page.

and I can eval this <h1> just as if it's a expression. You can see it
on the screen.

[some demo of live change of html/css]

41:52

Sacha: How to you save it afterwards, if you really like your code?

Christopher: You can just save the buffer, but that might not be
sufficient. There's really no way to capture right now.

you can see that it's just building up css style sheets on the page,
it's messy. So am not sure one'd want to catpure it now.

Sacha: But it's really good for experimentation. I can see how the
live is really great for feedback. Even hitting the refresh after
changing the css, is just a bit more friction.

Christopher: Yes, I hate that so much I want to treat web development
as a live system I can hack while it is being build.

i can do further with this. So here's my blog again, you see this
little green triangle on the top right corner, I can click and toggle
that. When it's green, that mean skewer can edit this page. This works
not just with my blog. There's a little browser extention I wrote to
make it work with skewer. I can togle this on any page. For example if
I'm on github... although this wont work with github website because
they've got security cranked up so much they won't let this work.

i can hook into it, and come over to Emacs and execute JavaScript code
on that page, and same for css. This way, I can tab into any page and
do anything to make it work.

Sacha: I have to go to get that setup, definitely.

i guess you use that for a lot development.

Christopher: That made JavaScript to be one of my preferred language
actually. Because, there's webgl now, and html5, canvas. If I need to
write program live that has a graphical interface, I can hack this up
without ever refreshing a page.

Sacha: You mean like foreign function interface?

Christopher: That's what I was doing before I started this skewer
project.

i got is this cool thing with it. If you are familiar with voroni
diagram. This is webgl. The original ideas was that I can write a
shader for each pixel on the screen, it compares to every vertex and
colors itself appropriately. The gpu is very good at this. I came up
with a even better version involving 3-dimentional cones and a depth
buffer that's a lot faster. That's why I got this out, you can
actually drag these around, just like this.

it's a little slow on this machine because I'm using plain open source
drivers which is not as fast as on a machine with real video drivers.

it's pretty fast considering it's not actually doing any evaluation
with the voroni diagram. There's something called fortune algorithm
that has sweep lines that travels across and doing all this stuff, but
this is really just a brute force with the graphics card doing most of
the work.

its developed live with skewer like this. I can change the shaders and
update the page while it's running, without refreshing the page.

Sacha: You are working with a lot cool things. One thing I want to
mention, because it's also really cool too but non-technical. You have
released all these things into the public domain?

how you made that decision? and how's that played out?

Christopher: I started using gpl about 7 years ago. I read Richard
Stallman's freesoftware and free society, and actually have a signed
version of that. I got really into fsf and got a membership, and
everything I did was licensned under gpl.

as I got more experience, I find that licenses are cumbersome. If I
want to use even just a snippet of somebody's code, to formally follow
the license I gotta list their names, follow all these rules to make
it work. It's cumbersome to worry about these license stuff all the
time, especially if the software got large involving all these
licenses, even if it's just the 3-clause bsd license that just require
credit, even that is cumbersome. So I decided I didn't want any part
of that, I just want to make my code as useful as it can be to most
people as possible. I do that by putting it in public domain. Nobody's
got any obligation to me when they use this stuff.

Sacha: Thank you for doing that. It's great that you sharing them so
freely.

do you have any tips for people getting into Emacs internals or
playing around with some of these cool stuff?

Christopher: You have Emacs source code, sometimes everything's not
documented clearly in the docstring, so you might have to dig into
source code to see how it works, or if you have bugs, a lot of times u
need to dig into the source code to see what's wrong.

i guess the main resources are... i actually didn't read the Emacs
manual much ... it's kind of highlevel and not really useful for
hacking Emacs. The real useful manual is the Emacs lisp reference
manual. It comes with Emacs. You can see in the info page here. =C-h
i=

it covers everything, or almost everything. You can see how big it is.
This index is 1400 lines.

for example, I want to see how process works. So I can just search the
string processes and read about how it works.

there's a lot sections and features I'm not aware of and I got
surprised by all the time.

so, use the Emacs lisp reference to see all Emacs can do and you can
hack it. Occasionally you have to dig into Emacs source code to see
how things work. My recent example of that is, in elfeed there's a
bug, where somebody want to use =x-get-selection=. How this function
is defined depends on what platform you are on. The doc string for
=x-get-selection= doesn't really cover how each platform works. What's
convenient about this is there's link to the source code, see this
`select.el'? i got a keyboard shortcut that can jump right into the
source code. So you see here's the source code for =x-get-selection=.

Sacha: I use `find-function' i find that edebug. Sometimes I find
myself needing to dig into the C source code as well?

Christopher: Yeah. That's another way how I got into the Emacs
internals. I've gotto into 2 lisp interpreters. One of them I wrote,
which is a crappy toy lisp. Another one is with Brian Taylor I
mentioned before, we wrote a scheme intepreter together.

so I have experience of how lisp is put together internally, so I can
look at Emacs and see lots similarities and understand what's going on
and navigate around.

Sacha: Did you do this before coming into Emacs?

Christopher: It's hard to say. It might've been that lisp interested
me and I got into Emacs initially, but as I said it was 9 years ago I
started Emacs and it was both lisp and Emacs that got me into it at
the same time, so I can't remember which came first. They kind of came
hand-in-hand.

some people online asks “how do you get into Common Lisp?” and one of
the answer is Emacs, that's one of the most powerful editor for lisp
right now.

Sacha: It made sense. Lots people has build very interesting things on
top of it.

thanks for sharing your workflow. It looks really cool.

Christopher: Thanks.

Sacha: That certainly gave me lots of things to play around after
this, and i hop a lot people botth listening and afterward get to play
with this too. Thank you again so much for taking your time to share
you workflow.

another curiosity. I'm doing these Emacs chats for other people to get
into Emacs. How people use Emacs, how did they got into it, what kind
of cool things people are working on. Is there anyone you like to see
in one of this episodes?

Christopher: If I were to pick a name I would say steve purcel? xx
he's the curator of MELPA right now.

